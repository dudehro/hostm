#!/bin/bash

# Pfad dieses Scriptes bestimmen
real=$(realpath "$0")
script_pfad=$(dirname "$real")
HOST_CONFIG_DIR="$script_pfad/host_config"

function nvl() {
    var="$1"
    if [ -z "$var" ]
    then
        echo ""
    else
        echo "$1"
    fi
}

function mkdir_out(){
        if [ ! -d "$script_pfad/out" ]; then
                mkdir "$script_pfad/out"
        fi
}

function load_host_environment(){
	#echo "Lade Umgebung für $HOST"
	exists_host_config
	source "$HOST_CONFIG_DIR"/"$HOST"/host.conf
	export SSH_CONNECT_STRING
	SSH_CONNECT_STRING=$(nvl "$SSH_CONNECT_STRING")
	export SSH_PORT
	if [ -z $SSH_PORT ]; then
		SSH_PORT="22"
	else
		SSH_PORT="$SSH_PORT"
	fi
}

function clear_host_environment(){
	SSH_CONNECT_STRING=""
	SSH_PORT=""
}

function echo_host_config() {
	HOST="$1"
	exists_host_config
	load_host_environment
	echo "SSH-Connectstring: $SSH_CONNECT_STRING"
	echo "SSH-Port: $SSH_PORT"
}

function exists_host_config() {
    if [ ! -f "$HOST_CONFIG_DIR/$HOST/host.conf" ]; then
        echo "Konfiguration für Host nicht gefunden $HOST_CONFIG_DIR/$HOST/host.conf"
    fi
}

function ssh_to_host() {
	HOST="$1"
	load_host_environment
	(ssh -p "$SSH_PORT" "$SSH_CONNECT_STRING")
	clear_host_environment
}

function scp_to_host() {
	HOST="$1"
	load_host_environment
	(scp -P "$SSH_PORT" -r "$2" "$SSH_CONNECT_STRING:$3")
	clear_host_environment
}

function help() {
	echo "--print [HOST]"
	echo "--ssh [HOST]"
	echo "--scp [HOST] [SRC] [DEST]"
	echo "--edit [HOST]"
        echo "--help"
        echo "--sshfs [HOST]"
        echo "--copy-id [HOST]"
        echo "--copy-id-all"
        echo "--test-ssh-all"
        echo "--bash [HOST] [CMD]  see also https://www.shellhacks.com/ssh-execute-remote-command-script-linux/"
        echo "--bash-all [CMD], output for each host will be written into scriptpath/out/$HOSTNAME"
	echo "--script [HOST] [SCRIPT]"
	echo "--script-all [SCRIPT] like --bash-all but executes a script"
}

function edit_config() {
    nano $HOST_CONFIG_DIR/$1/host.conf
}

function sshfs_to_host() {
	HOST="$1"
	load_host_environment
	sshfs_mountpoint="$HOME/mountpoints/$1"
	mkdir -p "$sshfs_mountpoint"
	(sshfs "$SSH_CONNECT_STRING:/" "$sshfs_mountpoint" -p "$SSH_PORT")
	if [ $? -eq 0 ]; then
		echo "Mountpoint $sshfs_mountpoint"
	fi
	clear_host_environment
}

function copy_id(){
	HOST="$1"
	if [ ! -f ~/.ssh/id_rsa.pub ]; then
		echo "HINWEIS: RSA-Schlüssel nicht vorhanden, wird erstellt."
		echo "ssh-keygen -t rsa -b 4096"
		ssh-keygen -t rsa -b 4096
	fi
	load_host_environment
	if [ "$SSH_PORT" != "" ]; then
		SSH_PORT=" -p $SSH_PORT "
	fi
	#diect call of ssh-copy-id doesn't work somehow
	EXEC_CMD="ssh-copy-id $SSH_PORT $SSH_CONNECT_STRING"
	(exec $EXEC_CMD)
	clear_host_environment
}

function copy_id_to_all_hosts(){
	for HOSTDIR in $HOST_CONFIG_DIR/*
	do
		HOST=$(basename "$HOSTDIR")
		echo "========================================"
		echo "HOST: $HOST"
		(copy_id "$HOST")
	done
}

function test_ssh_all(){
	execute_cmd_on_all_hosts "echo 'CMD over SSH is working'"
}

function execute_cmd_on_all_hosts(){
	CMD="$1"
	mkdir_out
        for HOSTDIR in $HOST_CONFIG_DIR/*
        do
          	HOST=$(basename "$HOSTDIR")
		echo "$HOST"
                execute_cmd_on_host "$HOST" "$CMD" >> "$script_pfad/out/$HOST"
        done
}

function execute_cmd_on_host(){
	HOST=$1
	CMD="$2"
	load_host_environment
	(ssh -p "$SSH_PORT" "$SSH_CONNECT_STRING" $CMD)
	clear_host_environment
}

function execute_script_on_host(){
        HOST=$1
        load_host_environment
	ssh -p "$SSH_PORT" "$SSH_CONNECT_STRING" 'bash -s' < $2
        clear_host_environment
}

function execute_script_on_all_hosts(){
	SCRIPT=$1
	mkdir_out
        for HOSTDIR in $HOST_CONFIG_DIR/*
        do
                HOST=$(basename "$HOSTDIR")
                echo "$HOST"
		(execute_script_on_host "$HOST" "$SCRIPT" ) >> "$script_pfad/out/$HOST"
	done
}

case "$1" in
	--print)
		echo_host_config "$2"
	;;
	--ssh)
		ssh_to_host "$2"
	;;
	--scp)
		scp_to_host "$2" "$3"
	;;
	--edit)
		edit_config "$2"
	;;
	--help)
		help
	;;
	--sshfs)
		sshfs_to_host "$2"
	;;
	--copy-id)
		copy_id "$2"
	;;
	--copy-id-all)
		copy_id_to_all_hosts
	;;
	--test-ssh-all)
		test_ssh_all
	;;
	--bash)
		execute_cmd_on_host "$2" "$3"
	;;
	--bash-all)
		execute_cmd_on_all_hosts "$2"
	;;
	--script)
		execute_script_on_host "$2" "$3"
	;;
	--script-all)
		execute_script_on_all_hosts "$2"
	;;
	*)
    		help
	;;
esac

exit 0
